#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# MQTT SCANNING
#
# ----------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------
# CLEAR RETAINED 
# ----------------------------------------------------------------------------------------
mqtt_broker_clean (){
	#MQTT LOOP
	while read instruction; do 
		#GET THE TOPIC PATH
		local topic=$(echo "$instruction" | awk -F " {" '{print $1}')

		#PUBLISH CLEARING MESSAGE
		$mosquitto_pub_path $mqtt_ca_file_append -r -n -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$topic"

	done < <($(which mosquitto_sub) $mqtt_ca_file_append -v -W 1 -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/#" ) 
}

# ----------------------------------------------------------------------------------------
# MQTT LISTENER
# ----------------------------------------------------------------------------------------
mqtt_listener (){
	#ANNOUCEE HEALTH 
	$mosquitto_pub_path $should_retain $mqtt_ca_file_append -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/$mqtt_publisher_identity/status" -m "online"

	#MQTT LOOP
	while read instruction; do 
		echo "MQTT$instruction" > main_pipe 
	done < <($(which mosquitto_sub) $mqtt_ca_file_append -v -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/scan/#" --will-topic "$mqtt_topicpath/$mqtt_publisher_identity/status" --will-payload "offline") 
}
# ----------------------------------------------------------------------------------------
# PUBLISH MESSAGE
# ----------------------------------------------------------------------------------------

publish_presence_message () {
	if [ ! -z "$1" ]; then 

		#SET NAME FOR 'UNKONWN'
		local name="$3"
		local confidence="$2"
		local should_retain=""
		local retain_flag="false"

		[ -z "$confidence" ] && confidence=0

		#IF NO NAME, RETURN "UNKNOWN"
		if [ -z "$name" ]; then 
			name="Unknown"
		fi 

		#APPEND INFORMATION FOR BTLE BEACONS
		local append=""
		local append_debug=""
		[ ! -z "$6" ] && append="$append,\"rssi\":\"$6\"" && append_debug="$append_debug , rssi : $6 " 
		[ ! -z "$7" ] && append="$append,\"power\":\"$7\"" && append_debug="$append_debug , power : $7 " 
		[ ! -z "$8" ] && append="$append,\"adv_data\":\"$8\"" && append_debug="$append_debug , adv_data : $8 " 

		#DEBUG PRINTING
		debug_append=$(echo "$append_debug" | sed 's/ , /<br><p>/g')
		
		#TIMESTAMP
		stamp=$(date "+%a %b %d %Y %H:%M:%S GMT%z (%Z)")

		#CLEAR PREVIOUS RETAINED MESSAGE
		if [ "$PREF_SHOULD_RETAIN" == true ]; then 
			should_retain="-r "
			retain_flag="true"
		fi 

		#DEFINE THE TOPIC
		local topic="$mqtt_topicpath/$1"
		[ "$PREF_MQTT_SINGLE_TOPIC_MODE" == true ] && topic="$mqtt_topicpath/$mqtt_publisher_identity"

		#SHOULD FORMAT AS LETTERS/NUMBERS
		[ "$PREF_FORMAT_MQTT" == true ] && topic=$(echo "$topic" | sed 's/[^A-Z0-9a-z/]//g') 

		#DEBUGGING WITH SIMPLE
		log "${PURPLE}$topic <br>{<br><p>retain: $retain_flag<br><p>version : $version<br><p>address : $(basename "$1")<br><p>confidence : $confidence<br><p>name : $name<br><p>timestamp : $stamp<br><p>manufacturer : $4<br><p>type : $5$debug_append<br>}${NC}"
		

		#POST TO MQTT
		$mosquitto_pub_path $should_retain $mqtt_ca_file_append -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$topic" -m "{\"id\":\"$(basename "$1")\", \"retained\":\"$retain_flag\", \"version\":\"$version\", \"confidence\":\"$2\",\"name\":\"$name\",\"timestamp\":\"$stamp\",\"manufacturer\":\"$4\",\"type\":\"$5\",\"rssi\":\"$6\"$append}"
	fi
}

publish_cooperative_scan_message () {
	if [ ! -z "$1" ] && [ -z "$2" ]; then 
		#DEBUGGING 
		(>&2 log "${PURPLE}$mqtt_topicpath/scan/$1${NC}")

		#POST TO MQTT
		$mosquitto_pub_path $mqtt_ca_file_append -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/scan/$1" -m "{\"identity\":\"$mqtt_publisher_identity\"}"

	elif [ ! -z "$1" ] && [ ! -z "$2" ]; then 

		(>&2 log "${PURPLE}$mqtt_topicpath/$2/$1${NC}")

		#POST TO MQTT
		$mosquitto_pub_path $mqtt_ca_file_append -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/$2/$1" -m "{\"identity\":\"$mqtt_publisher_identity\"}"

	else 
		(>&2 log "${PURPLE}$mqtt_topicpath/scan${NC}")

		$mosquitto_pub_path $mqtt_ca_file_append -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/scan" -m "{\"identity\":\"$mqtt_publisher_identity\"}"
	fi 
}


publish_environment_message () {
	if [ ! -z "$1" ]; then 
		#DEBUGGING 
		(>&2 log "${PURPLE}$mqtt_topicpath/$mqtt_publisher_identity/environment $1${NC}")

		#POST TO MQTT
		$mosquitto_pub_path $mqtt_ca_file_append -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/$mqtt_publisher_identity/environment" -m "$1"
	fi 
}

#SHOULD CLEAN? 
[ "$PREF_CLEAN_MQTT" == true ]  && mqtt_broker_clean && exit 1
